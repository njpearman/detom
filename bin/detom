#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'detom'
rescue LoadError => e
  STDERR.puts e.message
  STDERR.puts e.backtrace
  STDERR.puts "In development, you need to use `bundle exec bin/detom` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/detom now"
  exit 64
end

class App
  extend GLI::App

  program_desc "Minimalistic project and client time tracking on the command line"

  version Detom::VERSION

  subcommand_option_handling :normal
  arguments :strict

  desc "List all clients currently being tracked"
  command :clients do |c|
    c.action do |global_options,options,args|
      begin 
        Commands::Clients.new.call
      rescue StandardError => e
        STDERR.puts e.message
        STDERR.puts e.backtrace
      end
    end
  end

  desc "Record some time spent on a client. <client> and <time> are required. <client> is the name of the client and <time> is an amount of time in minutes, e.g. 39m, or hours, e.g. 3h"
  arg_name "<time> <client>"
  command :record do |c|
    c.flag [:d, :"day-month"]
    c.action do |global_options, options, args|
      help_now! "You must provide record with <time> and <client> as arguments" if args.length < 2

      begin
        store = YamlFileStore.new
        Commands::Record.new(store).call args[0], args[1], options[:d]
      rescue StandardError => e
        STDERR.puts e.message
        STDERR.puts e.backtrace
      end
    end
  end

  desc "Archive tracking for a client or a project. Literally copies the client file into ~/.detom/archive/client-<today>.json"
  arg_name "client"
  command :archive do |c|
    c.action do |global_options, options, args|
      exit_now! "archive has not yet been implemented"
    end
  end

  desc "Use to mark the start / stop time on a client. This can then be used to record an amount of time against that client."
  arg_name "client"
  switch [:e, :end],
    desc: "Registers the mark as the end of a period."

  switch [:l, :list],
    desc: "Displays all stored marks for the client."

  switch [:C, :clear],
    desc: "Clears all stored marks for the client."

  command :mark do |c|
    c.action do |global_options, options, args|
      exit_now! "mark has not yet been implemented"
    end
  end
  
  pre do |global,command,options,args|
    # Pre logic here
    # Return true to proceed; false to abort and not call the
    # chosen command
    # Use skips_pre before a command to skip this block
    # on that command only
    true
  end

  post do |global,command,options,args|
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
  end

  on_error do |exception|
    # Error logic here
    # return false to skip default error handling
    true
  end
end

exit App.run(ARGV)
